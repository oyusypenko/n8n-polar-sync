{
  "name": "Polar Sleep",
  "nodes": [
    {
      "parameters": {
        "authentication": "basicAuth",
        "requestMethod": "POST",
        "url": "https://polarremote.com/v2/oauth2/token",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "grant_type",
              "value": "authorization_code"
            },
            {
              "name": "code",
              "value": "={{ $json.query.code }}"
            },
            {
              "name": "redirect_uri",
              "value": "={{ $json.webhookUrl }}"
            }
          ]
        },
        "headerParametersUi": {
          "parameter": [
            {
              "name": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        }
      },
      "id": "8ba7a787-c3ab-4424-8dfb-f8320ed48fcb",
      "name": "Get Access Token1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1280,
        256
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "5koWyd3F4VAs2B1w",
          "name": "Unnamed credential 2"
        }
      }
    },
    {
      "parameters": {
        "path": "85b334f9-cd84-4069-b9dd-2d00321deebc",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1472,
        256
      ],
      "id": "15dfbdd8-2e23-41cc-ab5c-2d2f86ca09e1",
      "name": "Webhook1",
      "webhookId": "85b334f9-cd84-4069-b9dd-2d00321deebc"
    },
    {
      "parameters": {
        "jsCode": "const expiresIn = $json.expires_in;\nconst issuedAt = new Date().getTime();\nconst expiresAt = issuedAt + expiresIn * 1000;\n\n// Можно сохранить токены во временное хранилище или external DB\nreturn [{\n  json: {\n    access_token: $json.access_token,\n    refresh_token: $json.refresh_token,\n    expires_at: expiresAt,\n    polar_user_id: $json.x_user_id\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1088,
        256
      ],
      "id": "3c8e94cb-b888-4fd5-8d57-1b5e738b9df9",
      "name": "Save token info1"
    },
    {
      "parameters": {
        "operation": "update",
        "collection": "tokens",
        "updateKey": "polar_user_id",
        "fields": "=access_token, expires_at, polar_user_id",
        "upsert": true,
        "options": {}
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        -912,
        256
      ],
      "id": "64b18ce6-3752-4397-be86-455307acb5ad",
      "name": "MongoDB3",
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "LcS83UqJyHAiimBp",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "6956860291",
        "text": "={{ $json.message }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -848,
        1024
      ],
      "id": "45096b44-cdf5-4967-9ccf-d6f405f161eb",
      "name": "Send a text message",
      "webhookId": "6ef59309-7f46-4e2e-83c8-53472ea9238f",
      "credentials": {
        "telegramApi": {
          "id": "j9XVDouY35Diz3Gx",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "model": "mistral:7b",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        -1280,
        768
      ],
      "id": "760a247d-32b2-4d80-8dfb-06d0cdd84977",
      "name": "Ollama Chat Model",
      "credentials": {
        "ollamaApi": {
          "id": "cmsNh1xwOg400f9Z",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Проанализируй данные сна:\n\nДата: {{ $json.date }}\n{{ JSON.stringify($json, null, 2) }}\n\nДай подробный анализ качества сна и рекомендации.",
        "options": {
          "systemMessage": "={\n  \"parameters\": {\n    \"promptType\": \"define\",\n    \"text\": \"=Форматируй данные сна в следующем виде:\\n\\nВРЕМЯ СНА:\\nЗасыпание: {{ $json.sleep_start_time }}\\nПробуждение: {{ $json.sleep_end_time }}\\nОбщая продолжительность: {{ Math.floor(($json.light_sleep + $json.deep_sleep + $json.rem_sleep) / 3600) }}ч {{ Math.floor((($json.light_sleep + $json.deep_sleep + $json.rem_sleep) % 3600) / 60) }}мин\\n\\nФАЗЫ СНА:\\n• Легкий сон: {{ Math.floor($json.light_sleep / 60) }} мин ({{ Math.round(($json.light_sleep / ($json.light_sleep + $json.deep_sleep + $json.rem_sleep)) * 1000) / 10 }}%)\\n• Глубокий сон: {{ Math.floor($json.deep_sleep / 60) }} мин ({{ Math.round(($json.deep_sleep / ($json.light_sleep + $json.deep_sleep + $json.rem_sleep)) * 1000) / 10 }}%)\\n• REM сон: {{ Math.floor($json.rem_sleep / 60) }} мин ({{ Math.round(($json.rem_sleep / ($json.light_sleep + $json.deep_sleep + $json.rem_sleep)) * 1000) / 10 }}%)\\n\\nКАЧЕСТВО: {{ $json.sleep_score }}/100\",\n    \"options\": {\n      \"systemMessage\": \"Ты должен форматировать данные сна точно в указанном формате. Не добавляй ничего лишнего, только:\\n- ВРЕМЯ СНА (засыпание, пробуждение, общая продолжительность)\\n- ФАЗЫ СНА (легкий, глубокий, REM с процентами)\\n- КАЧЕСТВО сна\\n\\nИспользуй только русский язык и точный формат из примера.\"\n    }\n  }\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -1280,
        544
      ],
      "id": "27399586-98a2-4889-8312-4c78b1dbf399",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "collection": "send_reports",
        "options": {},
        "query": "={\n  \"date\": \"{{ $now.format('yyyy-MM-dd') }}\"\n}"
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        -1744,
        1024
      ],
      "id": "0f852598-8086-4a43-92ba-886a582ad69f",
      "name": "Check Daily Report",
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "LcS83UqJyHAiimBp",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# n8n Python Code Node\nimport json\nfrom datetime import datetime\n\n# Get data from the previous node (array with data)\ninput_data = _input.all()[0]['json']\n\n# Check data structure - can be array or object with nights\nif isinstance(input_data, list):\n    # If it's an array, take the first element\n    if input_data and 'nights' in input_data[0]:\n        sleep_data = input_data[0]['nights'][0]\n    else:\n        sleep_data = input_data[0]  # Direct array with sleep data\nelif isinstance(input_data, dict) and 'nights' in input_data:\n    # If it's an object with nights\n    sleep_data = input_data['nights'][0]\nelse:\n    # If it's a direct object with sleep data\n    sleep_data = input_data\n\n# Norms for comparison\nNORMAL_RANGES = {\n    'deep_sleep': (15, 20),\n    'rem_sleep': (20, 25),  \n    'light_sleep': (50, 65),\n    'continuity': (4.0, 5.0),\n    'sleep_efficiency': (85, 95)\n}\n\ndef evaluate_range(value, normal_range):\n    min_val, max_val = normal_range\n    if value < min_val:\n        return \"low\"\n    elif value > max_val:\n        return \"high\" \n    else:\n        return \"normal\"\n\ndef format_minutes_to_hours_minutes(minutes):\n    \"\"\"Convert minutes to 'X hours Y minutes' format\"\"\"\n    if minutes < 0:\n        return f\"-{format_minutes_to_hours_minutes(-minutes)}\"\n    \n    hours = int(minutes // 60)\n    remaining_minutes = int(minutes % 60)\n    \n    if hours == 0:\n        return f\"{remaining_minutes}m\"\n    elif remaining_minutes == 0:\n        return f\"{hours}h\"\n    else:\n        return f\"{hours}h {remaining_minutes}m\"\n\n# Basic calculations (all in seconds, convert to minutes)\nlight_sleep_sec = sleep_data.get('light_sleep', 0)\ndeep_sleep_sec = sleep_data.get('deep_sleep', 0)\nrem_sleep_sec = sleep_data.get('rem_sleep', 0)\nunrecognized_sec = sleep_data.get('unrecognized_sleep_stage', 0)\n\n# Convert to minutes for all calculations\nlight_sleep_min = light_sleep_sec / 60\ndeep_sleep_min = deep_sleep_sec / 60\nrem_sleep_min = rem_sleep_sec / 60\nunrecognized_min = unrecognized_sec / 60\n\ntotal_sleep_time_sec = light_sleep_sec + deep_sleep_sec + rem_sleep_sec\ntotal_sleep_time_min = total_sleep_time_sec / 60\n\n# Time\nstart_time = sleep_data.get('sleep_start_time', '')\nend_time = sleep_data.get('sleep_end_time', '')\n\ntry:\n    start_dt = datetime.fromisoformat(start_time.replace('Z', '+00:00'))\n    end_dt = datetime.fromisoformat(end_time.replace('Z', '+00:00'))\n    time_in_bed_sec = (end_dt - start_dt).total_seconds()\n    time_in_bed_min = time_in_bed_sec / 60\nexcept:\n    time_in_bed_sec = total_sleep_time_sec + sleep_data.get('total_interruption_duration', 0)\n    time_in_bed_min = time_in_bed_sec / 60\n\n# Sleep efficiency\nsleep_efficiency = (total_sleep_time_min / time_in_bed_min * 100) if time_in_bed_min > 0 else 0\n\n# Sleep phases\nif total_sleep_time_min > 0:\n    light_pct = (light_sleep_min / total_sleep_time_min) * 100\n    deep_pct = (deep_sleep_min / total_sleep_time_min) * 100\n    rem_pct = (rem_sleep_min / total_sleep_time_min) * 100\n    unrecognized_pct = (unrecognized_min / total_sleep_time_min) * 100 if unrecognized_min > 0 else 0\nelse:\n    light_pct = deep_pct = rem_pct = unrecognized_pct = 0\n\n# Evaluations\ndeep_status = evaluate_range(deep_pct, NORMAL_RANGES['deep_sleep'])\nrem_status = evaluate_range(rem_pct, NORMAL_RANGES['rem_sleep'])\nlight_status = evaluate_range(light_pct, NORMAL_RANGES['light_sleep'])\ncontinuity_status = evaluate_range(sleep_data.get('continuity', 0), NORMAL_RANGES['continuity'])\n\n# Sleep quality\ninterruptions_min = sleep_data.get('total_interruption_duration', 0) // 60\nshort_interruptions_min = sleep_data.get('short_interruption_duration', 0) // 60\nlong_interruptions_min = sleep_data.get('long_interruption_duration', 0) // 60\n\n# Hypnogram\nhypnogram = sleep_data.get('hypnogram', {})\nwake_episodes = sum(1 for value in hypnogram.values() if value == 0) if hypnogram else 0\n\n# Basic metrics (all in minutes)\nsleep_goal_sec = sleep_data.get('sleep_goal', 28800)  # Default 8 hours in seconds\nsleep_goal_min = sleep_goal_sec / 60\nsleep_deficit_min = max(0, sleep_goal_min - total_sleep_time_min)  # Only positive deficit\nsleep_surplus_min = max(0, total_sleep_time_min - sleep_goal_min)  # Extra sleep\n\n# Science-based recommendations using Polar data and modern research\nrecommendations = []\n\n# 1. Sleep duration recommendations (based on scientific data)\nif sleep_deficit_min > 30:\n    recommendations.append(f\"🕐 Increase sleep time by {format_minutes_to_hours_minutes(sleep_deficit_min)} for optimal recovery\")\nelif total_sleep_time_min < 360:  # less than 6 hours\n    recommendations.append(\"🕐 Critically low sleep - aim for 7-9 hours for adults\")\nelif sleep_data.get('group_duration_score', 100) < 80:  # softer threshold\n    recommendations.append(\"🕐 Sleep duration consistency is more important than perfect amount\")\n\n# 2. Continuity recommendations (based on Polar documentation)\ncontinuity_val = sleep_data.get('continuity', 0)\ncontinuity_class = sleep_data.get('continuity_class', 0)\n\n# Using official Polar descriptions\nif continuity_class == 1 or continuity_val < 2.0:\n    recommendations.append(\"😴 Fragmented sleep: check mattress, pillow and room temperature (16-19°C)\")\nelif continuity_class == 2 or continuity_val < 3.0:\n    recommendations.append(\"😴 Fairly fragmented sleep: limit noise and light, avoid caffeine after 2 PM\")\nelif continuity_class == 3 or continuity_val < 4.0:\n    recommendations.append(\"😴 Moderate continuity: create consistent bedtime ritual\")\n\n# 3. Sleep phase recommendations (based on validated Polar data)\nregeneration_score = sleep_data.get('group_regeneration_score', 100)\n\n# Deep sleep recommendations (Polar: optimal ~17% for maximum score)\nif deep_status == \"low\" or deep_pct < 13:\n    recommendations.append(\"🛌 Low deep sleep: maintain regular sleep schedule, avoid alcohol 3 hours before bed\")\n    if total_sleep_time_min > 0:\n        recommendations.append(\"🛌 For deep sleep: go to bed before midnight when main recovery occurs\")\n\n# REM sleep recommendations (Polar: optimal ~25% for maximum score)\nif rem_status == \"low\" or rem_pct < 18:\n    recommendations.append(\"🧠 Low REM sleep: manage stress, avoid intense workouts before bed\")\n    recommendations.append(\"🧠 REM sleep is crucial for memory: maintain stable wake time\")\n\n# 4. Sleep efficiency (scientifically validated 85% threshold)\nif sleep_efficiency < 85:\n    recommendations.append(\"⚡ Low sleep efficiency: only go to bed when feeling sleepy\")\n    recommendations.append(\"⚡ 20-minute rule: if not asleep in 20 min - get up and do quiet activity\")\n\n# 5. Sleep interruption recommendations (based on Polar documentation)\nlong_interruptions_min = sleep_data.get('long_interruption_duration', 0) / 60\nshort_interruptions_min = sleep_data.get('short_interruption_duration', 0) / 60\n\n# Polar: long awakenings ≥90 seconds, average ~15 minutes per night\nif long_interruptions_min > 20:  # above average + margin\n    recommendations.append(\"🚫 Frequent long awakenings: consult doctor to rule out sleep apnea\")\nelif long_interruptions_min > 15:\n    recommendations.append(\"🚫 Long awakenings: check bed comfort and eliminate external disturbances\")\n\n# 6. Sleep charge (personal Polar metric)\nsleep_charge = sleep_data.get('sleep_charge', 3)\nif sleep_charge <= 2:\n    recommendations.append(\"📈 Sleep quality below usual: analyze recent lifestyle changes\")\n    if continuity_val < 3.0:\n        recommendations.append(\"📈 Consider relaxation techniques before bed (meditation, breathing exercises)\")\nelif sleep_charge >= 4:\n    recommendations.append(\"✨ Excellent sleep quality! Continue current habits\")\n\n# 7. Heart rate analysis (based on HRV during sleep research)\nheart_rate_samples = sleep_data.get('heart_rate_samples', {})\nif heart_rate_samples:\n    hr_values = list(heart_rate_samples.values())\n    if hr_values:\n        avg_hr = sum(hr_values) / len(hr_values)\n        # More individualized approach instead of fixed 70 threshold\n        # Consider age and fitness level\n        estimated_resting_hr = 60 + (max(0, 30 - 20) * 0.5)  # approximate formula\n        \n        if avg_hr > estimated_resting_hr * 1.3:  # 30% above estimated\n            recommendations.append(\"❤️ Elevated sleep heart rate: check room temperature, stress levels\")\n            recommendations.append(\"❤️ Consider stress reduction techniques and medical consultation\")\n\n# 8. Sleep cycle recommendations (scientific data: 4-5 cycles per night)\nsleep_cycles = sleep_data.get('sleep_cycles', 0)\nif sleep_cycles < 3 and total_sleep_time_min > 300:  # if slept more than 5 hours but few cycles\n    recommendations.append(\"🔄 Few sleep cycles: possible fragmentation, check sleep conditions\")\nelif sleep_cycles > 6:\n    recommendations.append(\"🔄 Many short cycles: possible frequent micro-awakenings\")\n\n# 9. Special recommendations based on patterns\ntotal_interruption_min = sleep_data.get('total_interruption_duration', 0) / 60\nif total_interruption_min > total_sleep_time_min * 0.15:  # more than 15% time in awakenings\n    recommendations.append(\"⚠️ Significant sleep fragmentation: consider specialist consultation\")\n\n# 10. Positive reinforcements (important for motivation)\nif sleep_efficiency >= 90 and continuity_val >= 4.0:\n    recommendations.append(\"🌟 Excellent sleep architecture - your habits are working perfectly!\")\n\nif deep_pct >= 15 and rem_pct >= 20:\n    recommendations.append(\"🌟 Optimal sleep phase ratio for recovery\")\n\n# Time formatting\ntry:\n    start_dt = datetime.fromisoformat(start_time.replace('Z', '+00:00'))\n    start_time_str = start_dt.strftime('%H:%M')\n    end_time_str = datetime.fromisoformat(end_time.replace('Z', '+00:00')).strftime('%H:%M')\n    date_str = start_dt.strftime('%d/%m/%Y')\nexcept:\n    start_time_str = \"N/A\"\n    end_time_str = \"N/A\"\n    date_str = sleep_data.get('date', 'N/A')\n\n# Prepare sleep balance text\nif sleep_deficit_min > 0:\n    sleep_balance_text = f\"Deficit: {format_minutes_to_hours_minutes(sleep_deficit_min)}\"\nelif sleep_surplus_min > 0:\n    sleep_balance_text = f\"Surplus: {format_minutes_to_hours_minutes(sleep_surplus_min)}\"\nelse:\n    sleep_balance_text = \"Goal achieved!\"\n\n# Report generation\nreport = f\"\"\"\n  SLEEP ANALYSIS - {date_str}                     \n\n🕐 SLEEP TIME:\n   Bedtime: {start_time_str} | Wake time: {end_time_str}\n   Time in bed: {format_minutes_to_hours_minutes(time_in_bed_min)}\n   Actual sleep: {format_minutes_to_hours_minutes(total_sleep_time_min)}\n   Sleep goal: {format_minutes_to_hours_minutes(sleep_goal_min)}\n   {sleep_balance_text}\n   Efficiency: {sleep_efficiency:.1f}%\n\n🧠 SLEEP PHASES:\n   • Light:  {format_minutes_to_hours_minutes(light_sleep_min)}  ({light_pct:.1f}%) (Normal: 44-65%)\n   • Deep: {format_minutes_to_hours_minutes(deep_sleep_min)} ({deep_pct:.1f}%) (Normal: 17-20%)\n   • REM:     {format_minutes_to_hours_minutes(rem_sleep_min)} ({rem_pct:.1f}%) (Normal: 20-25%)\n   • Unrecognized: {format_minutes_to_hours_minutes(unrecognized_min)} ({unrecognized_pct:.1f}%) (Normal: 0-10%)\n\n📊 SLEEP QUALITY:\n   Overall score: {sleep_data.get('sleep_score', 0)}/100\n   Continuity: {sleep_data.get('continuity', 0):.1f}/5.0 [{continuity_status}]\n   Sleep cycles: {sleep_data.get('sleep_cycles', 0)}\n   Sleep charge: {sleep_data.get('sleep_charge', 0)}/5 (vs usual level)\n\n⚠️  AWAKENINGS:\n   • Wake episodes: {wake_episodes}\n\n💡 RECOMMENDATIONS:\"\"\"\n\nfor i, rec in enumerate(recommendations, 1):\n    report += f\"\\n   {i}. {rec}\"\n\nif not recommendations:\n    report += \"\\n   ✅ Excellent sleep quality! Keep it up.\"\n\ndate_iso = end_dt.strftime('%Y-%m-%d')  # ISO format for return\n# Return array of dictionaries for n8n\nreturn [{\n    'json': {\n        'message': report,\n        'date': date_iso\n    }\n}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1008,
        1024
      ],
      "id": "dcc6c253-16b4-4cb8-b1f0-3c918194cb07",
      "name": "Format Sleep Data"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 30
            },
            {
              "field": "cronExpression",
              "expression": "0,30 8-23 * * *"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1904,
        1024
      ],
      "id": "adca9526-556d-41c5-8ab7-43525fa85f55",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "sleep_data",
        "fields": "={{ Object.keys($json).join(',') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        -1152,
        1024
      ],
      "id": "2a9badcd-3bfc-4d0f-a7de-954cd056e55f",
      "name": "Save Sleep Data",
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "LcS83UqJyHAiimBp",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "collection": "tokens",
        "options": {}
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        -1440,
        1024
      ],
      "id": "ba44027c-f563-45a4-b0e6-2634b1b3971e",
      "name": "Get Token From DB",
      "credentials": {
        "mongoDb": {
          "id": "LcS83UqJyHAiimBp",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://www.polaraccesslink.com/v3/users/sleep/{{ $now.format('yyyy-MM-dd') }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.access_token }}"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1296,
        1024
      ],
      "id": "ae965a03-7f9a-47b2-be0d-49af5d875781",
      "name": "Get Sleep Data Current Day"
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "send_reports",
        "fields": "=date, report_sent",
        "options": {}
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        -416,
        1024
      ],
      "id": "30c87464-aceb-4b43-b736-6f55c5588f47",
      "name": "MongoDB",
      "credentials": {
        "mongoDb": {
          "id": "LcS83UqJyHAiimBp",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "86396696-e719-4ba6-bca2-b004c3051d20",
              "leftValue": "={{ $json.ok }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -704,
        1024
      ],
      "id": "619fddf9-8e91-438f-ba0a-4df75f21c53a",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0e6b1f0a-98d4-4d54-bd5f-646bdcce3c49",
              "name": "date",
              "value": "={{ $('Format Sleep Data').item.json.date }}",
              "type": "string"
            },
            {
              "id": "f3796cd2-d418-4a1d-b1f9-588ddedd0650",
              "name": "report_sent",
              "value": true,
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -560,
        1024
      ],
      "id": "ba9d9dcc-5bba-435f-82e4-b4326bad7bd1",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1a5d9bb3-3e16-4422-864d-3392fdcbe6f1",
              "leftValue": "={{ $json.report_sent === true }}",
              "rightValue": "={{ true }}",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1600,
        1024
      ],
      "id": "dfdc8209-d279-4f22-bb3d-faedecd87e09",
      "name": "Check If Sent"
    }
  ],
  "pinData": {},
  "connections": {
    "Get Access Token1": {
      "main": [
        [
          {
            "node": "Save token info1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Get Access Token1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save token info1": {
      "main": [
        [
          {
            "node": "MongoDB3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Check Daily Report": {
      "main": [
        [
          {
            "node": "Check If Sent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Sleep Data": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Check Daily Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Token From DB": {
      "main": [
        [
          {
            "node": "Get Sleep Data Current Day",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Sleep Data": {
      "main": [
        [
          {
            "node": "Format Sleep Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Sleep Data Current Day": {
      "main": [
        [
          {
            "node": "Save Sleep Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB": {
      "main": [
        []
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "MongoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check If Sent": {
      "main": [
        [],
        [
          {
            "node": "Get Token From DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4dffcfe6-1a23-4238-a704-8ce4a63a54e2",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "aa8236f74ff15bc1c3374aa44a87734def2c485ed064c921afe5ffedfb200688"
  },
  "id": "buMBsx83BUyMBjyq",
  "tags": []
}